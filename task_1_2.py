"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
"""
Курс основы Python. 3 урок 3 задача.
3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и
возвращающую словарь, в котором ключи — первые буквы имён, а значения — списки,
содержащие имена, начинающиеся с соответствующей буквы. Например:
>>> thesaurus("Иван", "Мария", "Петр", "Илья")
{
"И": ["Иван", "Илья"],
"М": ["Мария"],
"П": ["Петр"]
}
Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется
сортировка по ключам? Можно ли использовать словарь в этом случае?
"""
from memory_profiler import profile
from collections import defaultdict
from pympler import asizeof
from json import dumps, loads


# исходное решение
@profile
def thesaurus(*args):
    directory = dict()
    for letter in args:
        directory[letter[0]] = directory.setdefault(letter[0], []) + [letter]
    directory = sorted(directory.items())
    print(dict(directory), type(dict(directory)), asizeof.asizeof(directory))


thesaurus('Вася', 'Петр', 'Игорь', 'Ирина', 'Абрам', 'Валера', 'Дмитрий', 'Полина', 'Света', 'Максим', 'Лео', 'Леонид',
          'Люся')


# оптимизированное решение
@profile
def thesaurus_(*args):
    directory = {}
    for letter in args:
        directory[letter[0]] = directory.setdefault(letter[0], []) + [letter]
    directory = sorted(directory.items())
    dump_dir = dumps(directory)
    del directory
    return loads(dump_dir), type(loads(dump_dir)), asizeof.asizeof(dump_dir)


print(thesaurus_('Вася', 'Петр', 'Игорь', 'Ирина', 'Абрам', 'Валера', 'Дмитрий', 'Полина', 'Света', 'Максим', 'Лео',
                 'Леонид', 'Люся'))

# применил удаление del к ссылке directory
# применил сериализацию для записи имен при помощи json.dumps(Размер directory 2896, размер json 616)
